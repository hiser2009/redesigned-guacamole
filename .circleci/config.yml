version: 2.1
jobs:
  build:
    working_directory: /app
    docker:
      - image: golang:1.18.5-alpine3.16
    environment:
      AWS_DEFAULT_REGION: us-east-1
      AWS_ROLE_ARN: arn:aws:iam::144291977149:role/circleci-oidc
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add docker
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
            awscli \
            && rm -rf /var/cache/apk/*         
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          # paths:
          #   - /caches/app.tar
      # - run:
      #     name: Make Dummy Docker Compse File
      #     command: |
      #       touch ././docker-compose.yml
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t app .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      # - run:
      #     name: Run tests
      #     command: |
      #       echo docker-compose -f ./docker-compose.test.yml >> ./docker-compose.test.yml
      #       docker-compose -f ./docker-compose.test.yml up
      - run: "I'm Done!"
      # - snyk/scan:
      #     docker-image-name: app --severity-threshold=high     || true
      #     fail-on-issues: true
      #     install-alpine-dependencies: true
      - deploy:
          name: Push application Docker image
          command: |
            aws configure set AWS_ACCESS_KEY_ID ${ACCESS_KEY_ID}
            aws configure set AWS_SECRET_ACCESS_KEY ${SECRET_ACCESS_KEY}
            aws configure set AWS_DEFAULT_REGION ${AWS_DEFAULT_REGION}
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              login="$(aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_ACCOUNT_URL)"
              docker tag app "${AWS_ECR_ACCOUNT_URL}/app:${CIRCLE_SHA1}" 
              docker push "${AWS_ECR_ACCOUNT_URL}/app:${CIRCLE_SHA1}"
            else
              echo "This is not master branch. No ECR image uploaded"
            fi

          
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build