version: 2.1
jobs:
  build:
    working_directory: /app
    docker:
      - image: golang:1.18.5-alpine3.16
    environment:
      AWS_DEFAULT_REGION: us-east-1
      AWS_ROLE_ARN: arn:aws:iam::144291977149:role/circleci-oidc
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add docker
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
            awscli \
            && rm -rf /var/cache/apk/*         
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          # paths:
          #   - /caches/app.tar
      # - run:
      #     name: Make Dummy Docker Compse File
      #     command: |
      #       touch ././docker-compose.yml
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t app .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      # - run:
      #     name: Run tests
      #     command: |
      #       echo docker-compose -f ./docker-compose.test.yml >> ./docker-compose.test.yml
      #       docker-compose -f ./docker-compose.test.yml up
      - run: echo "Uploading Image Now"
      # - snyk/scan:
      #     docker-image-name: app --severity-threshold=high     || true
      #     fail-on-issues: true
      #     install-alpine-dependencies: true
      - deploy:
          name: Push application Docker image
          shell: "/bin/bash -eo pipefail"
          command: |
            GIT_COMMIT_ID=$(git rev-parse --short HEAD)
            export AWS_PAGER=""
             # use the OpenID Connect token to obtain AWS credentials
            read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \<<< \
              $(aws sts assume-role-with-web-identity \
               --role-arn ${AWS_ROLE_ARN} \
               --role-session-name "CircleCI-${CIRCLE_WORKFLOW_ID}-${CIRCLE_JOB}" \
               --web-identity-token $CIRCLE_OIDC_TOKEN \
               --duration-seconds 3600 \
               --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
               --output text)
            export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
            aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
            aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
            aws configure set aws_session_token ${AWS_SESSION_TOKEN}
            aws configure set aws_role_arn ${AWS_ROLE_ARN}
            aws configure set default.region us-east-1
            aws sts get-caller-identity
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR
            docker tag app $ECR/go-test:$CIRCLE_BUILD_NUM
            docker tag app $ECR/go-test:$CIRCLE_SHA1
            docker tag app $ECR/go-test:git-$GIT_COMMIT_ID
            docker push $ECR/go-test:$CIRCLE_BUILD_NUM
            docker push $ECR/go-test:$CIRCLE_SHA1
            docker push $ECR/go-test:git-$GIT_COMMIT_ID
           

          
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build:
          context:
            - guac
